{"ast":null,"code":"import{useRef,useEffect}from\"react\";import{useParams}from\"react-router-dom\";import io from\"socket.io-client\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var Room=function Room(props){var userVideo=useRef();var partnerVideo=useRef();var peerRef=useRef();var socketRef=useRef();var otherUser=useRef();var userStream=useRef();var _useParams=useParams(),roomID=_useParams.roomID;useEffect(function(){// Ask the user for permission to use the webcam and microphone\nnavigator.mediaDevices.getUserMedia({audio:true,video:true}).then(function(stream){userVideo.current.srcObject=stream;userStream.current=stream;// We connect to the socket.io server\nsocketRef.current=io.connect(\"https://10.5.51.38:3001/\",{secure:false});// We send the roomID to the server\nsocketRef.current.emit(\"join room\",roomID);// we get the ID of the other user\nsocketRef.current.on(\"other user\",function(userID){// we call the other user (the one who created the room)\ncallUser(userID);// we save the ID of the other user\notherUser.current=userID;});// the one who created the room gets the ID of the other user\nsocketRef.current.on(\"user joined\",function(userID){otherUser.current=userID;});// This event is called wehen we receive an offer and we will then emit an answer to the server\nsocketRef.current.on(\"offer\",handleRecieveCall);// This event handle the answer we receive from the server\nsocketRef.current.on(\"answer\",handleAnswer);//\nsocketRef.current.on(\"ice-candidate\",handleNewICECandidateMsg);});},[]);function callUser(userID){// create a peer object\npeerRef.current=createPeer(userID);// we get the stream of the user who is calling and we add it to the peer object to then send it to the other user\nuserStream.current.getTracks().forEach(function(track){return peerRef.current.addTrack(track,userStream.current);});}// userID represents the ID of the user trying to call us\nfunction createPeer(userID){/* Create a peer object, the iceServers contains an url for the stun and turn server\n    these server job is to help the peer object to find the best way to connect to the other peer by bypassing\n     the firewall, NAT an other netowrk problems depending on the router configuration*/var peer=new RTCPeerConnection({iceServers:[{urls:\"stun:stun.stunprotocol.org\"// stun:stun.stunprotocol.org is a famous free public stun server\n},{urls:\"turn:numb.viagenie.ca\",// turn:numb.viagenie.ca is a free public turn server\ncredential:\"muazkh\",// the password for the turn server\nusername:\"webrtc@live.com\"// the username for the turn server\n}]});// onicecandidate event is called when the peer object find a candidate to connect to the other peer\npeer.onicecandidate=function(e){if(e.candidate){var payload={target:otherUser.current,candidate:e.candidate};socketRef.current.emit(\"ice-candidate\",payload);}};// on track event is called when a connection is established and we can start to stream the video. HandleTrackEvent will display the video of the other user\npeer.ontrack=handleTrackEvent;/* This event is called when there's a change like a user change his camera or microphone.\n     In this case we will update the connection with the new informations without restart the connection \n     instead of restart the connection at zero We use onegotionneeded to avoid to\n      recreate a call with peer.onicecandidate and peer.ontrack. (The one who change the connection is responsible to initiate the negotiation) */peer.onnegotiationneeded=function(){return handleNegotiationNeededEvent(userID);};return peer;}function handleNegotiationNeededEvent(userID){// Create an offer to the other user\npeerRef.current.createOffer().then(function(offer){// Change the curent description of the peer object to the offer we just created\nreturn peerRef.current.setLocalDescription(offer);}).then(function(){var payload={target:userID,caller:socketRef.current.id,sdp:peerRef.current.localDescription};// We send the offer to the server to send it to the other user\nsocketRef.current.emit(\"offer\",payload);}).catch(function(e){return console.log(e);});}function handleRecieveCall(inComingPayload){// we are receiving an offer from the other user so our createPeer dosen't need an ID\npeerRef.current=createPeer();var desc=new RTCSessionDescription(inComingPayload.sdp);// Set the description with the offer we received from the other user\npeerRef.current.setRemoteDescription(desc).then(function(){userStream.current// we get the stream of the user who is receiving the call\n.getTracks()// we get the tracks of the stream\n.forEach(function(track){return peerRef.current.addTrack(track,userStream.current);}// we add the tracks to the peer object\n);}).then(function(){// we create an answer to the offer we received\nreturn peerRef.current.createAnswer();}).then(function(answer){// we set the description of the peer object to the answer we just created\nreturn peerRef.current.setLocalDescription(answer);}).then(function(){var payload={target:inComingPayload.caller,// who he is\ncaller:socketRef.current.id,// who i am\nsdp:peerRef.current.localDescription// the description of the peer object\n};// we send the payload to the server to send it to the other user\nsocketRef.current.emit(\"answer\",payload);});}function handleAnswer(message){var desc=new RTCSessionDescription(message.sdp);// we set the description of the other user peer object with the answer we received from him\npeerRef.current.setRemoteDescription(desc).catch(function(e){return console.log(e);});}// This function will be called when we receive an ice candidate from the other user\nfunction handleNewICECandidateMsg(inComingPayload){// get the ice candidate\nvar candidate=new RTCIceCandidate(inComingPayload);// add the ice candidate to the peer object and try to estiblish a connection\npeerRef.current.addIceCandidate(candidate).catch(function(e){return console.log(e);});}function handleTrackEvent(e){// we set the source of the video to the stream of the other user, partnerVideo is the video element\npartnerVideo.current.srcObject=e.streams[0];}return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"video\",{autoPlay:true,ref:userVideo}),/*#__PURE__*/_jsx(\"video\",{autoPlay:true,ref:partnerVideo})]});};export default Room;","map":{"version":3,"names":["useRef","useEffect","useParams","io","Room","props","userVideo","partnerVideo","peerRef","socketRef","otherUser","userStream","roomID","navigator","mediaDevices","getUserMedia","audio","video","then","stream","current","srcObject","connect","secure","emit","on","userID","callUser","handleRecieveCall","handleAnswer","handleNewICECandidateMsg","createPeer","getTracks","forEach","track","addTrack","peer","RTCPeerConnection","iceServers","urls","credential","username","onicecandidate","e","candidate","payload","target","ontrack","handleTrackEvent","onnegotiationneeded","handleNegotiationNeededEvent","createOffer","offer","setLocalDescription","caller","id","sdp","localDescription","catch","console","log","inComingPayload","desc","RTCSessionDescription","setRemoteDescription","createAnswer","answer","message","RTCIceCandidate","addIceCandidate","streams"],"sources":["/var/www/client/src/routes/Room.js"],"sourcesContent":["import { useRef, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport io from \"socket.io-client\";\nconst Room = (props) => {\n  const userVideo = useRef();\n  const partnerVideo = useRef();\n  const peerRef = useRef();\n  const socketRef = useRef();\n  const otherUser = useRef();\n  const userStream = useRef();\n  const { roomID } = useParams();\n\n  useEffect(() => {\n    // Ask the user for permission to use the webcam and microphone\n    navigator.mediaDevices\n      .getUserMedia({ audio: true, video: true })\n      .then((stream) => {\n        userVideo.current.srcObject = stream;\n        userStream.current = stream;\n        // We connect to the socket.io server\n        socketRef.current = io.connect(\"https://10.5.51.38:3001/\", {\n          secure: false,\n        });\n        // We send the roomID to the server\n        socketRef.current.emit(\"join room\", roomID);\n\n        // we get the ID of the other user\n        socketRef.current.on(\"other user\", (userID) => {\n          // we call the other user (the one who created the room)\n          callUser(userID);\n          // we save the ID of the other user\n          otherUser.current = userID;\n        });\n        // the one who created the room gets the ID of the other user\n        socketRef.current.on(\"user joined\", (userID) => {\n          otherUser.current = userID;\n        });\n        // This event is called wehen we receive an offer and we will then emit an answer to the server\n        socketRef.current.on(\"offer\", handleRecieveCall);\n        // This event handle the answer we receive from the server\n        socketRef.current.on(\"answer\", handleAnswer);\n        //\n        socketRef.current.on(\"ice-candidate\", handleNewICECandidateMsg);\n      });\n  }, []);\n\n  function callUser(userID) {\n    // create a peer object\n    peerRef.current = createPeer(userID);\n    // we get the stream of the user who is calling and we add it to the peer object to then send it to the other user\n    userStream.current\n      .getTracks()\n      .forEach((track) => peerRef.current.addTrack(track, userStream.current));\n  }\n  // userID represents the ID of the user trying to call us\n  function createPeer(userID) {\n    /* Create a peer object, the iceServers contains an url for the stun and turn server\n    these server job is to help the peer object to find the best way to connect to the other peer by bypassing\n     the firewall, NAT an other netowrk problems depending on the router configuration*/\n    const peer = new RTCPeerConnection({\n      iceServers: [\n        {\n          urls: \"stun:stun.stunprotocol.org\", // stun:stun.stunprotocol.org is a famous free public stun server\n        },\n        {\n          urls: \"turn:numb.viagenie.ca\", // turn:numb.viagenie.ca is a free public turn server\n          credential: \"muazkh\", // the password for the turn server\n          username: \"webrtc@live.com\", // the username for the turn server\n        },\n      ],\n    });\n    // onicecandidate event is called when the peer object find a candidate to connect to the other peer\n    peer.onicecandidate = (e) => {\n      if (e.candidate) {\n        const payload = {\n          target: otherUser.current,\n          candidate: e.candidate,\n        };\n        socketRef.current.emit(\"ice-candidate\", payload);\n      }\n    };\n    // on track event is called when a connection is established and we can start to stream the video. HandleTrackEvent will display the video of the other user\n    peer.ontrack = handleTrackEvent;\n    /* This event is called when there's a change like a user change his camera or microphone.\n     In this case we will update the connection with the new informations without restart the connection \n     instead of restart the connection at zero We use onegotionneeded to avoid to\n      recreate a call with peer.onicecandidate and peer.ontrack. (The one who change the connection is responsible to initiate the negotiation) */\n    peer.onnegotiationneeded = () => handleNegotiationNeededEvent(userID);\n\n    return peer;\n  }\n\n  function handleNegotiationNeededEvent(userID) {\n    // Create an offer to the other user\n    peerRef.current\n      .createOffer()\n      .then((offer) => {\n        // Change the curent description of the peer object to the offer we just created\n        return peerRef.current.setLocalDescription(offer);\n      })\n      .then(() => {\n        const payload = {\n          target: userID,\n          caller: socketRef.current.id,\n          sdp: peerRef.current.localDescription,\n        };\n        // We send the offer to the server to send it to the other user\n        socketRef.current.emit(\"offer\", payload);\n      })\n      .catch((e) => console.log(e));\n  }\n\n  function handleRecieveCall(inComingPayload) {\n    // we are receiving an offer from the other user so our createPeer dosen't need an ID\n    peerRef.current = createPeer();\n    const desc = new RTCSessionDescription(inComingPayload.sdp);\n    // Set the description with the offer we received from the other user\n    peerRef.current\n      .setRemoteDescription(desc)\n      .then(() => {\n        userStream.current // we get the stream of the user who is receiving the call\n          .getTracks() // we get the tracks of the stream\n          .forEach(\n            (track) => peerRef.current.addTrack(track, userStream.current) // we add the tracks to the peer object\n          );\n      })\n      .then(() => {\n        // we create an answer to the offer we received\n        return peerRef.current.createAnswer();\n      })\n      .then((answer) => {\n        // we set the description of the peer object to the answer we just created\n        return peerRef.current.setLocalDescription(answer);\n      })\n      .then(() => {\n        const payload = {\n          target: inComingPayload.caller, // who he is\n          caller: socketRef.current.id, // who i am\n          sdp: peerRef.current.localDescription, // the description of the peer object\n        };\n        // we send the payload to the server to send it to the other user\n        socketRef.current.emit(\"answer\", payload);\n      });\n  }\n\n  function handleAnswer(message) {\n    const desc = new RTCSessionDescription(message.sdp);\n    // we set the description of the other user peer object with the answer we received from him\n    peerRef.current.setRemoteDescription(desc).catch((e) => console.log(e));\n  }\n\n  // This function will be called when we receive an ice candidate from the other user\n  function handleNewICECandidateMsg(inComingPayload) {\n    // get the ice candidate\n    const candidate = new RTCIceCandidate(inComingPayload);\n    // add the ice candidate to the peer object and try to estiblish a connection\n    peerRef.current.addIceCandidate(candidate).catch((e) => console.log(e));\n  }\n\n  function handleTrackEvent(e) {\n    // we set the source of the video to the stream of the other user, partnerVideo is the video element\n    partnerVideo.current.srcObject = e.streams[0];\n  }\n\n  return (\n    <div>\n      {/* This will display our cam */}\n      <video autoPlay ref={userVideo} />\n      {/* This will display the oponnent cam */}\n      <video autoPlay ref={partnerVideo} />\n    </div>\n  );\n};\n\nexport default Room;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}